<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pokémon Cards</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>
    <%- include('partials/header') %>
    <div class="top-bar">
      <div class="search-bar">
        <input type="text" placeholder="Rechercher un Pokémon..." />
        <button class="search-button">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </button>
      </div>

      <div class="container-switch">
        <div class="switch">
          <input type="checkbox" id="toggleSwitch" class="switch-input" />
          <label for="toggleSwitch" class="switch-label">
            <span class="switch-button"></span>
          </label>
        </div>
        <img src="/assets/pokedex.jpg" alt="pokedex" class="pokedex-icon" />
      </div>
    </div>
    <div class="pokemon-container">
      <% pokemons.forEach(pokemon => { %> <% if (pokemon.isOwned) { %> <%-
      include('partials/pokeCard', { pokemon }) %> <% } else { %> <%-
      include('partials/empty-pokeCard', { pokemon }) %> <% } %> <% }); %>
    </div>
    <div id="boosterModal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2 class="title-modal">Vos nouvelles cartes !</h2>
        <div class="booster-cards-container"></div>
      </div>
    </div>
    <script>
      document
        .getElementById("openBoosterBtn")
        .addEventListener("click", async () => {
          try {
            const response = await fetch("/api/booster");
            const data = await response.json();

            const boosterContainer = document.querySelector(
              ".booster-cards-container"
            );
            boosterContainer.innerHTML = "";

            data.randomPokemons.forEach((pokemon, index) => {
              const card = `
        <div class="pokemon-card-booster ${
          pokemon.type
        }" style="opacity: 0;" id="card-${index}">
          ${pokemon.isNew ? '<div class="new-badge">NOUVEAU !</div>' : ""}
          <div class="pokemon-card-header">
            <div class="pokemon-name">${pokemon.name}</div>
            <div class="header-wrapper">
              <div class="hp-display"><span>PV ${pokemon.hp}</div>
              <img
                class="img-type"
                src="/assets/type_${pokemon.type}.png"
                alt="${pokemon.name}"
              />
            </div>
          </div>
          <img src="${pokemon.image}" alt="${pokemon.name}" class="img-pokemon">
          <div class="pokemon-info">
            <div class="attack-info">
              <div class="attack-info-row">
                <strong>${pokemon.attack.name}</strong>
                <div class="attack-power">${pokemon.attack.power}</div>
              </div>
              <span class="attack-info-desc">${
                pokemon.attack.description
              }</span>
            </div>

            <div class="rarity-info">
            ${
              pokemon.rarity.label.charAt(0).toUpperCase() +
              pokemon.rarity.label.slice(1)
            }
            </div>
          </div>
        </div>
      `;
              boosterContainer.innerHTML += card;
            });

            document.getElementById("boosterModal").style.display = "block";
            document.body.classList.add("modal-open");

            for (let i = 0; i < data.randomPokemons.length; i++) {
              const card = document.getElementById(`card-${i}`);
              const isNew = data.randomPokemons[i].isNew;

              await new Promise((resolve) => setTimeout(resolve, 500));

              if (isNew) {
                card.style.opacity = "1";
                card.classList.add("new-card-animation");
                await new Promise((resolve) => setTimeout(resolve, 500));
              } else {
                card.style.transition = "all 0.5s ease";
                card.style.opacity = "1";
                card.style.transform = "scale(1)";
              }
            }
          } catch (error) {
            console.error("Erreur lors de l'ouverture du booster:", error);
          }
        });
      document.querySelector(".close-modal").addEventListener("click", () => {
        document.getElementById("boosterModal").style.display = "none";
        document.body.classList.remove("modal-open");
        
        // Rafraîchir la page après la fermeture de la modal
        window.location.reload();
      });

      document
        .getElementById("toggleSwitch")
        .addEventListener("change", function () {
          const showOwnedOnly = this.checked;
          const allCards = document.querySelectorAll(
            ".pokemon-container .empty-card"
          );

          allCards.forEach((card) => {
            const isOwned = card.classList.contains("owned");
            if (showOwnedOnly && !isOwned) {
              card.classList.add("hidden");
            } else {
              card.classList.remove("hidden");
            }
          });
        });

      const searchInput = document.querySelector(".search-bar input");

      // Fonction de recherche
      const performSearch = () => {
        const query = searchInput.value.toLowerCase();
        const allCards = document.querySelectorAll(
          ".pokemon-container .pokemon-card, .pokemon-container .empty-card"
        );

        allCards.forEach((card) => {
          const cardNameElement = card.querySelector(".pokemon-name");
          const cardName = cardNameElement
            ? cardNameElement.textContent.toLowerCase()
            : "";

          if (cardName.includes(query)) {
            card.classList.remove("hidden-search");
          } else {
            card.classList.add("hidden-search");
          }
        });
      };

      // Événement pour la saisie en temps réel
      searchInput.addEventListener("input", performSearch);
    </script>
  </body>
</html>
