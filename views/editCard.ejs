<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Modifier la carte Pokémon</title>
    <link rel="stylesheet" href="/css/styles.css" />
  </head>
  <body>
    <%- include('partials/header') %>

    <div class="edit-container">
      <!-- Formulaire -->
      <div class="edit-form">
        <h2>Modifier les informations</h2>
        <form
          id="editCardForm"
          method="POST"
          action="/api/pokemons/<%= card._id %>?_method=PUT"
        >
          <div class="row">
            <div class="form-group">
              <label for="name">Nom:</label>
              <input
                type="text"
                id="name"
                name="name"
                value="<%= card.name %>"
                required
              />
            </div>
            <div class="form-group">
              <label for="pv">PV:</label>
              <input
                type="number"
                id="pv"
                name="pv"
                value="<%= card.hp %>"
                required
              />
            </div>
          </div>
          <div class="form-group">
            <label for="image">Image URL :</label>
            <input
              type="text"
              id="image"
              name="image"
              value="<%= card.image %>"
            />
          </div>
          <div class="radio-group">
            <label class="radio-group-title">Type de Pokémon :</label>
            <% typesPokemons.forEach((type) => { %> <input type="radio"
            id="type-<%= type.toLowerCase() %>" name="type" value="<%= type %>"
            class="radio-input <%= card.type === type ? 'checked' : '' %>" <%=
            card.type === type ? 'checked' : '' %> required />
            <label for="type-<%= type.toLowerCase() %>" class="radio-label"
              ><%= type %></label
            >
            <% }); %>
          </div>
          <div class="form-group">
            <label for="rarity_level">Rareté :</label>
            <select id="rarity_level" name="rarity_level" required>
              <% rarities.forEach((rarity) => { %> <% if (card.rarity.level ===
              rarity.level) { %>
              <option value="<%= rarity.level %>" selected>
                <%= rarity.label %>
              </option>
              <% } else { %>²
              <option value="<%= rarity.level %>"><%= rarity.label %></option>
              <% } %> <% }); %>
            </select>
          </div>

          <div class="row">
            <div class="form-group">
              <label for="attack_name">Nom de l'attaque:</label>
              <input
                type="text"
                id="attack_name"
                name="attack_name"
                value="<%= card.attack.name %>"
                required
              />
            </div>
            <div class="form-group">
              <label for="attack_damage">Dégâts de l'attaque:</label>
              <input
                type="number"
                id="attack_damage"
                name="attack_damage"
                value="<%= card.attack.power %>"
                required
              />
            </div>
          </div>
          <div class="form-group">
            <label for="attack_description">Description de l'attaque:</label>
            <input
              type="text"
              id="attack_description"
              name="attack_description"
              value="<%= card.attack.description %>"
              required
            />
          </div>

          <button type="submit" id="submitEdit" class="submit-button">
            Enregistrer les modifications
          </button>
        </form>
      </div>

    </div>
    <script>
      document
        .getElementById("editCardForm")
        .addEventListener("submit", async (event) => {
          event.preventDefault(); // Empêche le rechargement de la page

          const form = event.target;

          // Récupérer les données du formulaire
          const formData = new FormData(form);
          const cardData = Object.fromEntries(formData.entries());

          // Structurer les données pour correspondre au backend
          cardData.hp = parseInt(cardData.pv, 10);
          cardData.attack = {
            name: cardData.attack_name,
            power: parseInt(cardData.attack_damage, 10),
            description: cardData.attack_description,
          };

          // Récupérer la rareté et l'étiquette correspondante
          const rarityLevels = [
            "Très Commun",
            "Commun",
            "Peu Commun",
            "Rare",
            "Très Rare",
          ];

          const rarity_label =
            rarityLevels[parseInt(cardData.rarity_level) - 1]; // -1 car l'index commence à 0

          cardData.rarity = {
            level: parseInt(cardData.rarity_level, 10),
            label: rarity_label, // Assurez-vous que cette valeur est correctement assignée
          };

          // Nettoyage des données
          delete cardData.pv;
          delete cardData.attack_name;
          delete cardData.attack_damage;
          delete cardData.attack_description;
          delete cardData.rarity_level;

          // Récupérer l'ID de la carte
          const action = form.getAttribute("action");
          const cardId = action.split("/").pop().split("?")[0]; // Récupère l'ID de la carte

          cardData._id = cardId;

          try {
            const response = await fetch(
              `/api/pokemons/${cardId}?_method=PUT`,
              {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(cardData),
              }
            );

            if (response.ok) {
              const result = await response.json();
              showSnackbar("Modifications enregistrées avec succès !");

              // Redirection après un court délai pour voir la snackbar
              setTimeout(() => {
                window.location.href = `/admin/edit/${cardId}`;
              }, 1500);
            } else {
              const error = await response.json();
              showSnackbar(error.message, false);
            }
          } catch (error) {
            console.error("Erreur lors de l'envoi des données :", error);
            showSnackbar("Une erreur s'est produite.", false);
          }
        });
    </script>
    <script src="/js/snackbar.js"></script>
    <script src="/js/admin.js"></script>
    <div id="snackbar" class="snackbar"></div>
  </body>
</html>
